try(setwd('~/Work/Bristol/RaczPassmoreJordan2018/'))
# Code for the paper ""
```{r }
try(setwd('~/Work/Bristol/RaczPassmoreJordan2018/'))
library('dplyr') # to massage data
library('itsadug') # to fit rad gams
library('ggplot2') # for fab plots
library('stringr') # strings
# library('narnia')
# library('FactoMineR') # for the PCA
library('ggfortify') # for the PCA
library('ggmap') # for map
# library('ggmosaic') # for mosaic plot
# library('vcd') # for mosaic plot
library('xtable') # for formatting tables
library('reshape2') # for melting and casting
d <- read.csv('ea_tidy_cousin_only.csv') %>% filter(!is.na(cousin_terms)) # see rpj2018_helper.r
mapWorld <- map_data('world', wrap=c(-25,335), ylim=c(-55,75)) # pacific centered
load('multiplot.Rfnc') # http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
formatCousinData <- function(d){
# fix up factor levels
d$cousin_terms <- factor(d$cousin_terms, levels = c('hawaiian','eskimo','iroquois','crow/omaha','sudanese/desc'))
# d %>% select(cousin_terms,cousin_rank) %>% unique # bingo
d$descent <- factor(d$descent, levels = c('patrilineal','matrilineal','bilateral_quasi','duo_ambi','mixed'))
d$subsistence <- factor(d$subsistence, levels = c('int_agr','ext_agr','foraging','pastoralism'))
# tidy labels for plots
d$kinship <- str_extract(d$cousin_terms, '^.') %>% factor(levels = c('h','e','i','c','s'))
d$lon2 <- ifelse(d$lon < -20, d$lon + 360, d$lon)
d$descent_type <- NA
d$descent_type <- ifelse(d$descent %in% c('patrilineal', 'matrilineal'), 'unilineal', d$descent_type)
d$descent_type <- ifelse(d$descent %in% c('bilateral_quasi', 'duo_ambi'), 'symmetrical', d$descent_type)
d$cousin__marriage <- NA
d$cousin__marriage <- ifelse(d$cousin_marriage == 1, 'forbidden', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 2, 'some 2nd', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 3, 'some 1st', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 4, 'all 1st', d$cousin__marriage)
d$cousin__marriage <- factor(d$cousin__marriage, levels = c('forbidden', 'some 2nd', 'some 1st', 'all 1st'))
d$subsistence_type <- ifelse(d$subsistence == 'pastoralism', 'pastoralists', 'others')
d$subsistence_type <- factor(d$subsistence_type, levels = c('pastoralists', 'others'))
return(d)
}
save(formatCousinData, file = "formatCousinData.Rfnc")
d <- formatCousinData(d)
# get the subset of the twelve biggest families for plots
biggest_family <- d %>% filter(family!='') %>% group_by(family) %>% summarise(n = n()) %>% arrange(-n) %>% head(12) %>% pull(family)
d_big <- d %>% filter(family %in% biggest_family)
```
# take map of the world,
# add labels for kinship types and colour for family in the 12 biggest families
# remove axes (they are not interesting)
# write a custom caption title and scale
ggplot() +
geom_polygon(data = mapWorld, aes(x=long, y = lat, group = group)) +
geom_label(data = d_big, aes(x = lon2, y = lat, colour = family, label = kinship)) +
guides(colour = F) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank()) +
labs(caption = '[h]awaiian, [e]skimo, [i]roquois, [c]row/omaha, [s]udanese/descriptive. twelve largest language families.') +
scale_colour_manual(values = rainbow(12))# +
# ggtitle('kinship systems in D-PLACE')
ggsave('cousin_paper_text-kinfig.pdf', width = 12, height = 6)
load('k1gamm.rda')
print(kable(summary(k1)$p.table[,-4], include.rownames=F, floating=F, digits=3, caption = 'Summary of the fixed effects, Model 3', label = 'summary_comb'))
# library('ggmosaic') # for mosaic plot
# library('vcd') # for mosaic plot
# library('xtable') # for formatting tables
library('knitr')
print(kable(summary(k1)$p.table[,-4], include.rownames=F, floating=F, digits=3, caption = 'Summary of the fixed effects, Model 3', label = 'summary_comb'))
library('RColorBrewer') # for colours
brewer.pal(5, Set3)
brewer.pal(5, 'Set3')
d9 <- d %>% filter(!is.na(jurisdiction_local),!is.na(subsistence),!is.na(cousin_marriage),!is.na(descent))
# get predictions
pred1 = predict(k1, d9, type = 'response', se.fit = T)
# get pred and se
pred1se = pred1[[2]]
pred1 = pred1[[1]]
# get preds right
# tidy up colnames
colnames(pred1) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
# combine them with societies
pred1 = d9 %>% select(soc_id) %>% cbind(pred1)
# make it nice and long
pred1 = melt(pred1, id.vars='soc_id')
names(pred1)[names(pred1)=='variable'] = 'cousin_pred_class'
names(pred1)[names(pred1)=='value'] = 'cousin_pred_value'
# get se right (the same)
colnames(pred1se) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
pred1se = d9 %>% select(soc_id) %>% cbind(pred1se)
pred1se = melt(pred1se, id.vars='soc_id')
names(pred1se)[names(pred1se)=='variable'] = 'cousin_pred_class'
names(pred1se)[names(pred1se)=='value'] = 'cousin_SE_value'
# combine them
pred1 = merge(pred1,pred1se)
# merge them with the dataset (if we only got predictions for one outcome, like in a binomial model, this would be this one line)
# watch out that the name of the prediction is something else than the name of the actual cousin term
pred1 = merge(d9,pred1)
# aggregate over cousin marriage
predCousinMarriage <- pred1 %>% select(soc_id,cousin_marriage,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(cousin_marriage,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
# get pos dodge and colours
pd <- position_dodge(0.1) # move them .05 to the left and right
# my_colours = topo.colors(5)
my_colours = brewer.pal(5, "Set3")
# make plot: dots are predictions, error bars are standard errors, aggregated across categories. labels fixed by hand.
p1 = ggplot(predCousinMarriage, aes(x=cousin_marriage, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
xlab('prevalence of cousin marriage') + ylab('probability of kinship system') + scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_continuous(labels=c("1" = "forbidden", "2" = "some 2nd", "3" = "some 1st", "4" = "all 1st"))
# the following three plots follow the same logic.
predDescent <- pred1 %>% select(soc_id,descent,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(descent,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value)) %>% filter(!is.na(descent))
p2 = ggplot(predDescent, aes(x=descent, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
ylab('') +
xlab('descent: unilineal > ambilineal > bilateral') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_colour_manual(values=my_colours) +
ylim(0,1)
predSubsistence <- pred1 %>% select(soc_id,subsistence,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(subsistence,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p3 = ggplot(predSubsistence, aes(x=subsistence, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
guides(colour = F) +
geom_point(position=pd, size = 3) +
xlab('main subsistence') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_discrete(labels=c("int_agr" = "intensive agr.", "ext_agr" = "extensive agr.", "foraging" = "foraging", "pastoralism" = "pastoralism"))
predPCL <- pred1 %>% mutate(jurisdiction_local = as.factor(jurisdiction_local)) %>% select(soc_id,jurisdiction_local,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(jurisdiction_local,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p4 = ggplot(predPCL, aes(x=jurisdiction_local, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
xlab('local jurisdictional hierarchy') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) + scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="bottom") +
guides(colour = guide_legend(override.aes = list(size=6))) + guides(colour = guide_legend(nrow = 2)) +
labs(colour = 'kinship system') +
scale_x_discrete(labels=c("2" = "independent fam.", "3" = "extended fam.", "4" = "clan-barrios"))
print(multiplot(p1,p2,p3,p4, cols = 2))
ggsave('cousin_paper_text-predfig.pdf', width = 9, height = 7)
multiplot
