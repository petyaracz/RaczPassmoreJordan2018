geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
xlab('prevalence of cousin marriage') + ylab('probability of kinship system') + scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_continuous(labels=c("1" = "forbidden", "2" = "some 2nd", "3" = "some 1st", "4" = "all 1st"))
# the following three plots follow the same logic.
predDescent <- pred1 %>% select(soc_id,descent,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(descent,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value)) %>% filter(!is.na(descent))
p2 = ggplot(predDescent, aes(x=descent, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
ylab('') +
xlab('descent: unilineal > ambilineal > bilateral') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_colour_manual(values=my_colours) +
ylim(0,1)
predSubsistence <- pred1 %>% select(soc_id,subsistence,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(subsistence,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p3 = ggplot(predSubsistence, aes(x=subsistence, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
guides(colour = F) +
geom_point(position=pd, size = 3) +
xlab('main subsistence') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_discrete(labels=c("int_agr" = "intensive agr.", "ext_agr" = "extensive agr.", "foraging" = "foraging", "pastoralism" = "pastoralism"))
predPCL <- pred1 %>% mutate(jurisdiction_local = as.factor(jurisdiction_local)) %>% select(soc_id,jurisdiction_local,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(jurisdiction_local,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p4 = ggplot(predPCL, aes(x=jurisdiction_local, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
xlab('local jurisdictional hierarchy') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) + scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="bottom") +
guides(colour = guide_legend(override.aes = list(size=6))) + guides(colour = guide_legend(nrow = 2)) +
labs(colour = 'kinship system') +
scale_x_discrete(labels=c("2" = "independent fam.", "3" = "extended fam.", "4" = "clan-barrios"))
print(multiplot(p1,p2,p3,p4, cols = 2))
ggsave('cousin_paper_text-predfig.pdf', width = 9, height = 7)
multiplot
try(setwd('~/Work/Bristol/RaczPassmoreJordan2018/'))
library('dplyr') # to massage data
library('itsadug') # to fit gams
library('ggplot2') # for plots
library('stringr') # strings
# library('narnia')
# library('FactoMineR') # for the PCA
library('ggfortify') # for the PCA
library('ggmap') # for map
# library('ggmosaic') # for mosaic plot
# library('vcd') # for mosaic plot
# library('xtable') # for formatting tables
library('knitr')
library('reshape2') # for melting and casting
library('RColorBrewer') # for colours
d <- read.csv('ea_tidy_cousin_only.csv') %>% filter(!is.na(cousin_terms)) # see rpj2018_helper.r
mapWorld <- map_data('world', wrap=c(-25,335), ylim=c(-55,75)) # pacific centered
load('multiplot.Rfnc') # http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
formatCousinData <- function(d){
# fix up factor levels
d$cousin_terms <- factor(d$cousin_terms, levels = c('hawaiian','eskimo','iroquois','crow/omaha','sudanese/desc'))
# d %>% select(cousin_terms,cousin_rank) %>% unique # bingo
d$descent <- factor(d$descent, levels = c('patrilineal','matrilineal','bilateral_quasi','duo_ambi','mixed'))
d$subsistence <- factor(d$subsistence, levels = c('int_agr','ext_agr','foraging','pastoralism'))
# tidy labels for plots
d$kinship <- str_extract(d$cousin_terms, '^.') %>% factor(levels = c('h','e','i','c','s'))
d$lon2 <- ifelse(d$lon < -20, d$lon + 360, d$lon)
d$descent_type <- NA
d$descent_type <- ifelse(d$descent %in% c('patrilineal', 'matrilineal'), 'unilineal', d$descent_type)
d$descent_type <- ifelse(d$descent %in% c('bilateral_quasi', 'duo_ambi'), 'symmetrical', d$descent_type)
d$cousin__marriage <- NA
d$cousin__marriage <- ifelse(d$cousin_marriage == 1, 'forbidden', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 2, 'some 2nd', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 3, 'some 1st', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 4, 'all 1st', d$cousin__marriage)
d$cousin__marriage <- factor(d$cousin__marriage, levels = c('forbidden', 'some 2nd', 'some 1st', 'all 1st'))
d$subsistence_type <- ifelse(d$subsistence == 'pastoralism', 'pastoralists', 'others')
d$subsistence_type <- factor(d$subsistence_type, levels = c('pastoralists', 'others'))
return(d)
}
save(formatCousinData, file = "formatCousinData.Rfnc")
d <- formatCousinData(d)
# get the subset of the twelve biggest families for plots
biggest_family <- d %>% filter(family!='') %>% group_by(family) %>% summarise(n = n()) %>% arrange(-n) %>% head(12) %>% pull(family)
d_big <- d %>% filter(family %in% biggest_family)
# we make prediction plots for the four interesting variables from the combined model fit on everybody
d9 <- d %>% filter(!is.na(jurisdiction_local),!is.na(subsistence),!is.na(cousin_marriage),!is.na(descent))
# get predictions
pred1 = predict(k1, d9, type = 'response', se.fit = T)
# get pred and se
pred1se = pred1[[2]]
pred1 = pred1[[1]]
# get preds right
# tidy up colnames
colnames(pred1) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
# combine them with societies
pred1 = d9 %>% select(soc_id) %>% cbind(pred1)
# make it nice and long
pred1 = melt(pred1, id.vars='soc_id')
names(pred1)[names(pred1)=='variable'] = 'cousin_pred_class'
names(pred1)[names(pred1)=='value'] = 'cousin_pred_value'
# get se right (the same)
colnames(pred1se) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
pred1se = d9 %>% select(soc_id) %>% cbind(pred1se)
pred1se = melt(pred1se, id.vars='soc_id')
names(pred1se)[names(pred1se)=='variable'] = 'cousin_pred_class'
names(pred1se)[names(pred1se)=='value'] = 'cousin_SE_value'
# combine them
pred1 = merge(pred1,pred1se)
# merge them with the dataset (if we only got predictions for one outcome, like in a binomial model, this would be this one line)
# watch out that the name of the prediction is something else than the name of the actual cousin term
pred1 = merge(d9,pred1)
# aggregate over cousin marriage
predCousinMarriage <- pred1 %>% select(soc_id,cousin_marriage,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(cousin_marriage,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
# get pos dodge and colours
pd <- position_dodge(0.1) # move them .05 to the left and right
# my_colours = topo.colors(5)
my_colours = brewer.pal(5, "Set3")
# make plot: dots are predictions, error bars are standard errors, aggregated across categories. labels fixed by hand.
p1 = ggplot(predCousinMarriage, aes(x=cousin_marriage, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
xlab('prevalence of cousin marriage') + ylab('probability of kinship system') + scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_continuous(labels=c("1" = "forbidden", "2" = "some 2nd", "3" = "some 1st", "4" = "all 1st"))
# the following three plots follow the same logic.
predDescent <- pred1 %>% select(soc_id,descent,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(descent,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value)) %>% filter(!is.na(descent))
p2 = ggplot(predDescent, aes(x=descent, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
ylab('') +
xlab('descent: unilineal > ambilineal > bilateral') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_colour_manual(values=my_colours) +
ylim(0,1)
predSubsistence <- pred1 %>% select(soc_id,subsistence,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(subsistence,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p3 = ggplot(predSubsistence, aes(x=subsistence, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
guides(colour = F) +
geom_point(position=pd, size = 3) +
xlab('main subsistence') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_discrete(labels=c("int_agr" = "intensive agr.", "ext_agr" = "extensive agr.", "foraging" = "foraging", "pastoralism" = "pastoralism"))
predPCL <- pred1 %>% mutate(jurisdiction_local = as.factor(jurisdiction_local)) %>% select(soc_id,jurisdiction_local,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(jurisdiction_local,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p4 = ggplot(predPCL, aes(x=jurisdiction_local, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
xlab('local jurisdictional hierarchy') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) + scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="bottom") +
guides(colour = guide_legend(override.aes = list(size=6))) + guides(colour = guide_legend(nrow = 2)) +
labs(colour = 'kinship system') +
scale_x_discrete(labels=c("2" = "independent fam.", "3" = "extended fam.", "4" = "clan-barrios"))
print(multiplot(p1,p2,p3,p4, cols = 2))
ggsave('figs/cousin_paper_text-predfig.pdf', width = 11, height = 7)
load('mods/g1gamm.rda')
load('mods/f2bgamm.rda')
load('mods/s5bgamm.rda')
load('mods/k1gamm.rda')
load('mods/k4gamm.rda')
load('mods/k5gamm.rda')
est_galton <- summary(g1)$dev.expl %>% round(2)
n_prac <- summary(f2b)$n
est_prac <- summary(f2b)$dev.expl %>% round(2)
n_soc <- summary(s5b)$n
est_soc <- summary(s5b)$dev.expl %>% round(2)
n_comb <- summary(k1)$n
est_comb <- summary(k1)$dev.expl %>% round(2)
n_noaloha <- summary(k4)$n
est_noaloha <- summary(k4)$dev.expl %>% round(2)
n_sccs <- summary(k5)$n
est_sccs <- summary(k5)$dev.expl %>% round(2)
print(kable(summary(k1)$p.table[,-4], include.rownames=F, floating=F, digits=3, caption = 'Summary of the fixed effects, Model 3', label = 'summary_comb'))
# we make prediction plots for the four interesting variables from the combined model fit on everybody
d9 <- d %>% filter(!is.na(jurisdiction_local),!is.na(subsistence),!is.na(cousin_marriage),!is.na(descent))
# get predictions
pred1 = predict(k1, d9, type = 'response', se.fit = T)
# get pred and se
pred1se = pred1[[2]]
pred1 = pred1[[1]]
# get preds right
# tidy up colnames
colnames(pred1) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
# combine them with societies
pred1 = d9 %>% select(soc_id) %>% cbind(pred1)
# make it nice and long
pred1 = melt(pred1, id.vars='soc_id')
names(pred1)[names(pred1)=='variable'] = 'cousin_pred_class'
names(pred1)[names(pred1)=='value'] = 'cousin_pred_value'
# get se right (the same)
colnames(pred1se) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
pred1se = d9 %>% select(soc_id) %>% cbind(pred1se)
pred1se = melt(pred1se, id.vars='soc_id')
names(pred1se)[names(pred1se)=='variable'] = 'cousin_pred_class'
names(pred1se)[names(pred1se)=='value'] = 'cousin_SE_value'
# combine them
pred1 = merge(pred1,pred1se)
# merge them with the dataset (if we only got predictions for one outcome, like in a binomial model, this would be this one line)
# watch out that the name of the prediction is something else than the name of the actual cousin term
pred1 = merge(d9,pred1)
# aggregate over cousin marriage
predCousinMarriage <- pred1 %>% select(soc_id,cousin_marriage,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(cousin_marriage,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
# get pos dodge and colours
pd <- position_dodge(0.1) # move them .05 to the left and right
# my_colours = topo.colors(5)
my_colours = brewer.pal(5, "Set3")
# make plot: dots are predictions, error bars are standard errors, aggregated across categories. labels fixed by hand.
p1 = ggplot(predCousinMarriage, aes(x=cousin_marriage, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
xlab('prevalence of cousin marriage') + ylab('probability of kinship system') + scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_continuous(labels=c("1" = "forbidden", "2" = "some 2nd", "3" = "some 1st", "4" = "all 1st"))
# the following three plots follow the same logic.
predDescent <- pred1 %>% select(soc_id,descent,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(descent,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value)) %>% filter(!is.na(descent))
p2 = ggplot(predDescent, aes(x=descent, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
ylab('') +
xlab('descent: unilineal > ambilineal > bilateral') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_colour_manual(values=my_colours) +
ylim(0,1)
predSubsistence <- pred1 %>% select(soc_id,subsistence,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(subsistence,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p3 = ggplot(predSubsistence, aes(x=subsistence, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
guides(colour = F) +
geom_point(position=pd, size = 3) +
xlab('main subsistence') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_discrete(labels=c("int_agr" = "intensive agr.", "ext_agr" = "extensive agr.", "foraging" = "foraging", "pastoralism" = "pastoralism"))
predPCL <- pred1 %>% mutate(jurisdiction_local = as.factor(jurisdiction_local)) %>% select(soc_id,jurisdiction_local,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(jurisdiction_local,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p4 = ggplot(predPCL, aes(x=jurisdiction_local, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
xlab('local jurisdictional hierarchy') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) + scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="bottom") +
guides(colour = guide_legend(override.aes = list(size=6))) + guides(colour = guide_legend(nrow = 2)) +
labs(colour = 'kinship system') +
scale_x_discrete(labels=c("2" = "independent fam.", "3" = "extended fam.", "4" = "clan-barrios"))
print(multiplot(p1,p2,p3,p4, cols = 2))
ggsave('figs/cousin_paper_text-predfig.pdf', width = 11, height = 7)
########################################################################################################
# pull in EA data from dplace github repo, tidy it up, add region and language family information, the latter from the dplace # html, the former from wherever. write results into ea_tidy.csv
#
########################################################################################################
try(setwd('~/Work/Bristol/RaczPassmoreJordan2018/'))
library("RCurl") # to connect to the informational superhighway
library("dplyr") # to massage data
library("stringr") # to edit strings
library("reshape2") # to massage data more
library("jsonlite") # to get the json
pullInEA <- function(){
# Ethno Atlas from dplace github. accessed 12/7/17
variables <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/datasets/EA/variables.csv"), header=T)
codes <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/datasets/EA/codes.csv"), header=T)
dat <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/datasets/EA/data.csv"), header=T) # data is a reserved word
societies <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/datasets/EA/societies.csv"), header=T) %>% select(id, glottocode, pref_name_for_society, Lat, Long) %>% rename(lat = Lat, lon = Long, soc_id = id, society = pref_name_for_society)
locations <- getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/geo/societies_tdwg.json") %>% fromJSON
locations2 <- do.call(rbind.data.frame, locations)
locations2$soc_id <- rownames(locations2)
locations2 <- subset(locations2, soc_id %in% dat$soc_id) %>% select(-code) %>% rename(region = name)
languages <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/csv/glottolog.csv"), header=T)
languages <- languages %>% rename(family = family_name, glottocode = id) %>% select(family, glottocode)
societies <- merge(societies,languages)
# get society list from sccs
sccs <- read.csv(text=getURL("https://raw.githubusercontent.com/D-PLACE/dplace-data/master/datasets/SCCS/societies.csv"), header=T) %>% select(pref_name_for_society,glottocode,HRAF_name_ID)
societies$in_sccs <- ifelse(societies$glottocode %in% sccs$glottocode, T, F)
variables2 <- variables[,c('id','category','title','definition','type')]
variables2 <- rename(variables2, var_id = id)
variables3 <- merge(variables2,codes)
# adds up
dat2 <- dat[,c('soc_id','var_id','code')]
dat3 <- merge(dat2,variables3)
# doesn't add up: for some reason pop size (EA202) drops out. submitted an Issue on github. in the meantime
dat3b <- dat2[dat2$var_id == 'EA202',]
merge_with_dat3b <- variables3[variables3$var_id == 'EA202',] %>% select(-code)
dat3b2 <- merge(dat3b, merge_with_dat3b)
dat4 <- rbind(dat3,dat3b2)
# still doesn't add up, now there are a couple hundred extra rows.
# > nrow(dat2[dat2$var_id == 'EA202',])
# [1] 1291
# > nrow(dat4[dat4$var_id == 'EA202',])
# [1] 1629
dat5 <- unique(dat4)
# right.
# add regions and long / lat
dat6 <- merge(dat5,locations2)
# add lang fam
dat7 <- merge(societies,dat6)
}
dat7 <- pullInEA()
kell <- paste('EA', c("015","023","043","027","031","030","032","033","202","042"), sep='')
d8 <- subset(dat7, var_id %in% kell)
d8_soc <- d8 %>% select(soc_id,region,society,family,lon,lat,in_sccs) %>% unique
d8_var <- d8 %>% select(soc_id,var_id,code)
d9 <- dcast(d8_var, soc_id ~ var_id, value.var = "code") # why do you need to put the value var in quotes but not the rest? i'm going back to fortran
d10 <- merge(d9,d8_soc)
17.92 + 10.47 + 16.67 + 21 + 37.17 + 16.56 + 14.09 + 18.46 + 20
# Chunk 1
try(setwd('~/Work/Bristol/RaczPassmoreJordan2018/'))
library('dplyr') # to massage data
library('itsadug') # to fit gams
library('ggplot2') # for plots
library('stringr') # strings
# library('narnia')
# library('FactoMineR') # for the PCA
library('ggfortify') # for the PCA
library('ggmap') # for map
# library('ggmosaic') # for mosaic plot
# library('vcd') # for mosaic plot
# library('xtable') # for formatting tables
library('knitr')
library('reshape2') # for melting and casting
library('RColorBrewer') # for colours
d <- read.csv('ea_tidy_cousin_only.csv') %>% filter(!is.na(cousin_terms)) # see rpj2018_helper.r
mapWorld <- map_data('world', wrap=c(-25,335), ylim=c(-55,75)) # pacific centered
load('multiplot.Rfnc') # http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
formatCousinData <- function(d){
# fix up factor levels
d$cousin_terms <- factor(d$cousin_terms, levels = c('hawaiian','eskimo','iroquois','crow/omaha','sudanese/desc'))
# d %>% select(cousin_terms,cousin_rank) %>% unique # bingo
d$descent <- factor(d$descent, levels = c('patrilineal','matrilineal','bilateral_quasi','duo_ambi','mixed'))
d$subsistence <- factor(d$subsistence, levels = c('int_agr','ext_agr','foraging','pastoralism'))
# tidy labels for plots
d$kinship <- str_extract(d$cousin_terms, '^.') %>% factor(levels = c('h','e','i','c','s'))
d$lon2 <- ifelse(d$lon < -20, d$lon + 360, d$lon)
d$descent_type <- NA
d$descent_type <- ifelse(d$descent %in% c('patrilineal', 'matrilineal'), 'unilineal', d$descent_type)
d$descent_type <- ifelse(d$descent %in% c('bilateral_quasi', 'duo_ambi'), 'symmetrical', d$descent_type)
d$cousin__marriage <- NA
d$cousin__marriage <- ifelse(d$cousin_marriage == 1, 'forbidden', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 2, 'some 2nd', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 3, 'some 1st', d$cousin__marriage)
d$cousin__marriage <- ifelse(d$cousin_marriage == 4, 'all 1st', d$cousin__marriage)
d$cousin__marriage <- factor(d$cousin__marriage, levels = c('forbidden', 'some 2nd', 'some 1st', 'all 1st'))
d$subsistence_type <- ifelse(d$subsistence == 'pastoralism', 'pastoralists', 'others')
d$subsistence_type <- factor(d$subsistence_type, levels = c('pastoralists', 'others'))
return(d)
}
save(formatCousinData, file = "formatCousinData.Rfnc")
d <- formatCousinData(d)
# get the subset of the twelve biggest families for plots
biggest_family <- d %>% filter(family!='') %>% group_by(family) %>% summarise(n = n()) %>% arrange(-n) %>% head(12) %>% pull(family)
d_big <- d %>% filter(family %in% biggest_family)
# Chunk 2
# take map of the world,
# add labels for kinship types and colour for family in the 12 biggest families
# remove axes (they are not interesting)
# write a custom caption title and scale
ggplot() +
geom_polygon(data = mapWorld, aes(x=long, y = lat, group = group)) +
geom_label(data = d_big, aes(x = lon2, y = lat, colour = family, label = kinship)) +
guides(colour = F) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank()) +
labs(caption = '[h]awaiian, [e]skimo, [i]roquois, [c]row/omaha, [s]udanese/descriptive. twelve largest language families.') +
scale_colour_manual(values = rainbow(12))# +
# ggtitle('kinship systems in D-PLACE')
ggsave('figs/cousin_paper_text-kinfig.pdf', width = 12, height = 6)
# Chunk 3
popMiss <- d %>% filter(is.na(log_pop_size)) %>% nrow
popMiss <- round((popMiss / nrow(d) * 100),2)
comMiss <- d %>% filter(is.na(comm_size)) %>% nrow
comMiss <- round((comMiss / nrow(d) * 100),2)
# make plot for descent for 12 biggest families
d_big_descent <- d_big %>% filter(!is.na(descent_type)) %>% droplevels
# these three plots are similar: plot word, plot societies, use colour for variable, remove axes, set colours by hand, set caption by hand
prac1 <- ggplot() +
geom_polygon(data = mapWorld, aes(x=long, y = lat, group = group)) +
geom_label(data = d_big_descent, aes(x = lon2, y = lat, colour = descent_type, label = kinship)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank()) +
scale_colour_manual(values = c('violetred','gold4')) +
scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="top") +
guides(colour = guide_legend(override.aes = list(size=11))) +
labs(colour = 'descent type:', caption = '[h]awaiian, [e]skimo, [i]roquois, [c]row/omaha, [s]udanese/descriptive. twelve largest language families.')
d_big_cm <- d_big %>% filter(!is.na(cousin_marriage))
prac2 <- ggplot() +
geom_polygon(data = mapWorld, aes(x=long, y = lat, group = group)) +
geom_label(data = d_big_cm, aes(x = lon2, y = lat, colour = cousin__marriage, label = kinship)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank()) + theme(legend.position="top") +
guides(colour = guide_legend(override.aes = list(size=11))) +
labs(colour = 'cousin marriage:', caption = '[h]awaiian, [e]skimo, [i]roquois, [c]row/omaha, [s]udanese/descriptive. twelve largest language families.') +
scale_colour_manual(values = c('olivedrab4','orange2','orangered3','orchid4'))
d_big_subs <- d_big %>% filter(!is.na(subsistence))
prac3 <- ggplot() +
geom_polygon(data = mapWorld, aes(x=long, y = lat, group = group)) +
geom_label(data = d_big_subs, aes(x = lon2, y = lat, colour = subsistence_type, label = kinship)) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank()) + theme(legend.position="top") +
guides(colour = guide_legend(override.aes = list(size=11))) +
labs(colour = 'subsistence:', caption = '[h]awaiian, [e]skimo, [i]roquois, [c]row/omaha, [s]udanese/descriptive. twelve largest language families.') +
scale_colour_manual(values = c('goldenrod2','deeppink4'))
print(multiplot(prac1,prac2,prac3, cols = 1))
ggsave('figs/cousin_paper_text-pracfig.pdf', width=12, height=15)
# Chunk 4
soc_size <- d %>% select(subsistence,settlement,comm_size,jurisdiction,jurisdiction_local,log_pop_size) %>% na.omit %>% nrow
prac_size <- d %>% select(cousin_marriage,marriage,descent) %>% na.omit %>% nrow
final_size <- d %>% select(jurisdiction_local,subsistence,cousin_marriage,descent) %>% na.omit %>% nrow
# Chunk 6
load('mods/g1gamm.rda')
load('mods/f2bgamm.rda')
load('mods/s5bgamm.rda')
load('mods/k1gamm.rda')
load('mods/k4gamm.rda')
load('mods/k5gamm.rda')
est_galton <- summary(g1)$dev.expl %>% round(2)
n_prac <- summary(f2b)$n
est_prac <- summary(f2b)$dev.expl %>% round(2)
n_soc <- summary(s5b)$n
est_soc <- summary(s5b)$dev.expl %>% round(2)
n_comb <- summary(k1)$n
est_comb <- summary(k1)$dev.expl %>% round(2)
n_noaloha <- summary(k4)$n
est_noaloha <- summary(k4)$dev.expl %>% round(2)
n_sccs <- summary(k5)$n
est_sccs <- summary(k5)$dev.expl %>% round(2)
print(kable(summary(k1)$p.table[,-4], include.rownames=F, floating=F, digits=3, caption = 'Summary of the fixed effects, Model 3', label = 'summary_comb'))
# Chunk 7
# we make prediction plots for the four interesting variables from the combined model fit on everybody
d9 <- d %>% filter(!is.na(jurisdiction_local),!is.na(subsistence),!is.na(cousin_marriage),!is.na(descent))
# get predictions
pred1 = predict(k1, d9, type = 'response', se.fit = T)
# get pred and se
pred1se = pred1[[2]]
pred1 = pred1[[1]]
# get preds right
# tidy up colnames
colnames(pred1) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
# combine them with societies
pred1 = d9 %>% select(soc_id) %>% cbind(pred1)
# make it nice and long
pred1 = melt(pred1, id.vars='soc_id')
names(pred1)[names(pred1)=='variable'] = 'cousin_pred_class'
names(pred1)[names(pred1)=='value'] = 'cousin_pred_value'
# get se right (the same)
colnames(pred1se) = c('hawaiian', 'eskimo', 'iroquois', 'crow/omaha', 'sudanese/desc')
pred1se = d9 %>% select(soc_id) %>% cbind(pred1se)
pred1se = melt(pred1se, id.vars='soc_id')
names(pred1se)[names(pred1se)=='variable'] = 'cousin_pred_class'
names(pred1se)[names(pred1se)=='value'] = 'cousin_SE_value'
# combine them
pred1 = merge(pred1,pred1se)
# merge them with the dataset (if we only got predictions for one outcome, like in a binomial model, this would be this one line)
# watch out that the name of the prediction is something else than the name of the actual cousin term
pred1 = merge(d9,pred1)
# aggregate over cousin marriage
predCousinMarriage <- pred1 %>% select(soc_id,cousin_marriage,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(cousin_marriage,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
# get pos dodge and colours
pd <- position_dodge(0.1) # move them .05 to the left and right
# my_colours = topo.colors(5)
my_colours = brewer.pal(5, "Set3")
# make plot: dots are predictions, error bars are standard errors, aggregated across categories. labels fixed by hand.
p1 = ggplot(predCousinMarriage, aes(x=cousin_marriage, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
xlab('prevalence of cousin marriage') + ylab('probability of kinship system') + scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_continuous(labels=c("1" = "forbidden", "2" = "some 2nd", "3" = "some 1st", "4" = "all 1st"))
# the following three plots follow the same logic.
predDescent <- pred1 %>% select(soc_id,descent,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(descent,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value)) %>% filter(!is.na(descent))
p2 = ggplot(predDescent, aes(x=descent, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
guides(colour = F) +
ylab('') +
xlab('descent: unilineal > ambilineal > bilateral') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_colour_manual(values=my_colours) +
ylim(0,1)
predSubsistence <- pred1 %>% select(soc_id,subsistence,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(subsistence,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p3 = ggplot(predSubsistence, aes(x=subsistence, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
guides(colour = F) +
geom_point(position=pd, size = 3) +
xlab('main subsistence') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) +
scale_x_discrete(labels=c("int_agr" = "intensive agr.", "ext_agr" = "extensive agr.", "foraging" = "foraging", "pastoralism" = "pastoralism"))
predPCL <- pred1 %>% mutate(jurisdiction_local = as.factor(jurisdiction_local)) %>% select(soc_id,jurisdiction_local,cousin_pred_class,cousin_pred_value,cousin_SE_value) %>% group_by(jurisdiction_local,cousin_pred_class) %>% dplyr::summarise(mean = mean(cousin_pred_value), se = mean(cousin_SE_value))
p4 = ggplot(predPCL, aes(x=jurisdiction_local, y=mean, colour=cousin_pred_class, group=cousin_pred_class)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=pd) +
geom_line(position=pd, lty = 2) +
geom_point(position=pd, size = 3) +
xlab('local jurisdictional hierarchy') + ylab('') +
scale_colour_manual(values=my_colours) +
ylim(0,1) + scale_fill_continuous(guide = guide_legend()) +
theme(legend.position="bottom") +
guides(colour = guide_legend(override.aes = list(size=6))) + guides(colour = guide_legend(nrow = 2)) +
labs(colour = 'kinship system') +
scale_x_discrete(labels=c("2" = "independent fam.", "3" = "extended fam.", "4" = "clan-barrios"))
print(multiplot(p1,p2,p3,p4, cols = 2))
ggsave('figs/cousin_paper_text-predfig.pdf', width = 11, height = 7)
